<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>150</x>
      <y>30</y>
      <w>95</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>Class
--
Data Members
--
Methods
Constructors

transparency=1
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>150</x>
      <y>75</y>
      <w>155</w>
      <h>85</h>
    </coordinates>
    <panel_attributes>Timer
--
- executionTime : clock_t

--
+ startTimer() : void
+ stopTimer() : void
+ resetTimer() : void
+ displayTimerInformation() : void
+ getExecutionTimeInMicroseconds() : long
+Timer() : constructor


fg=white
bg=#001CFF
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>510</x>
      <y>0</y>
      <w>175</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData : int
- nodePointer : IntNode *

--
+ getNodeData() : int
+ getNodePointer() : IntNode *
+ setNodeData(int) : void
+ setNodePointer(IntNode *) : void

+ IntNode() : constructor
+ IntNode(int) : constructor
+ Intnode (int, IntNode *) : constructor

bg=#12FF00
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>150</x>
      <y>0</y>
      <w>95</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Created by 
Jonah Tucker
bg=cyan
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>285</x>
      <y>0</y>
      <w>155</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- head : IntNode*
- size : int
--
+ IntNodeArray(int) : constructor
+ getSize() : int
+ getFromIndex(int) : int
+ setAtIndex(int index, int value) : void

bg=#179B0D
transparency=1
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>305</x>
      <y>110</y>
      <w>225</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- nodeData : Type
- nodePointer: Node&lt;Type&gt; *
--
Construcutors
+ Node&lt;Type&gt;() : constructor
+ Node&lt;Type&gt;(Type value) : constructor
+ Node&lt;Type&gt;(Type value, Node&lt;Type&gt; * next) : constructor

Accessors

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt;()
+ setNodeData(Type) : void
+ setNodePointer(Node&lt;Type&gt; *) : void

transparency=1
bg=#29FAED</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>435</x>
      <y>45</y>
      <w>85</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
fg=white</panel_attributes>
    <additional_attributes>10.0;10.0;150.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>685</x>
      <y>0</y>
      <w>245</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>Array &lt;Type&gt;
--
- front : Node&lt;Type&gt;*
- size : int
--
+ Array() : default constructor
+ Array&lt;Type&gt;(int size) : constructor

+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+ getSize() const : int
+ getFront() const : Node&lt;Type&gt;*

+ getFromIndex(int index) : Type
+ setAtIndex(int index, Type value) : void

fg=white
transparency=1
bg=#00BFF</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>525</x>
      <y>115</y>
      <w>170</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
fg=white</panel_attributes>
    <additional_attributes>320.0;10.0;70.0;10.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>570</x>
      <y>125</y>
      <w>270</w>
      <h>145</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
- end : Node&lt;Type&gt; *
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source): copy constructor
+ ~List&lt;Type&gt; : destructor

+ addAtIndex(int index, Type Value) : void
+ addFront(Type value) : void
+ addEnd(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type 
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSieze() const : int
+ getFront() const : Node&lt;Type&gt; *

fg=white
transparency=1
bg=#4245f4</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>425</x>
      <y>230</y>
      <w>155</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n
fg=white</panel_attributes>
    <additional_attributes>290.0;40.0;10.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>360</x>
      <y>230</y>
      <w>15</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
fg=white</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>305</x>
      <y>265</y>
      <w>265</w>
      <h>165</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
-
- nodeData : Type
- nextPointer : BiDirectionalNode&lt;Type&gt; *
- previousPointer : BiDirectionalNode&lt;Type&gt; *

-
Constructors
+ BiDirectionalNode&lt;Type&gt;() : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value) : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value, Node&lt;Type&gt; * next) : constructor

Accessors

- getNodeData() : Type
- getNextPointer() : Node&lt;Type&gt;()
- getPreviousPointer() : Node&lt;Type&gt;()
- setNodeData(Type) : void
- setNextPointer(Node&lt;Type&gt; *) : void
- set Previous Pointer(Node&lt;Type&gt; * ) : void

fg=white
transparency=1
bg=#232487</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>770</x>
      <y>390</y>
      <w>210</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>/DoublelyLinkedList&lt;Type&gt;/
-
- size : int
- front: BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
-
Non-virtual methods
+ getSize() const : int
+ getFront const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

Virtual methods
+ add()

transparency=1
bg=#e0e0e0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>565</x>
      <y>405</y>
      <w>215</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n
fg=white</panel_attributes>
    <additional_attributes>410.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>650</x>
      <y>540</y>
      <w>145</w>
      <h>115</h>
    </coordinates>
    <panel_attributes>Model :: CircularList&lt;Type&gt;
--
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ CircularList() : constructor
+ ~CircularList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addAtIndex(int index, Type data) : void

bg=#bf39ce
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>805</x>
      <y>540</y>
      <w>145</w>
      <h>115</h>
    </coordinates>
    <panel_attributes>Model :: Queue&lt;Type&gt;
--
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type


bg=#e333f7
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>960</x>
      <y>540</y>
      <w>140</w>
      <h>115</h>
    </coordinates>
    <panel_attributes>Model :: Stack&lt;Type&gt;
--
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Stack(): constructor
+ ~Stack(): destructor

+ push(Type data) : void
+ pop(): Type
+ peek(): Type

+add(Type data) : void
+ remove(int index) : Type

bg=#e71cff
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>715</x>
      <y>495</y>
      <w>170</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
fg=white
bg=black</panel_attributes>
    <additional_attributes>320.0;10.0;320.0;80.0;10.0;80.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>870</x>
      <y>495</y>
      <w>15</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.

fg=white
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>870</x>
      <y>495</y>
      <w>165</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.

fg=white
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0;310.0;80.0;310.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>800</x>
      <y>675</y>
      <w>155</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>Model :: DoubleList&lt;Type&gt;
--
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ DoubleList() : constructor
+ ~DoubleList(): destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addFront(Type data) : void
+ addEnd(Type data) : void
+ addAtIndex(int index, Type data) : void
+ addFastIndex(int index, Type value) : void


bg=#ff1cef
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>150</x>
      <y>0</y>
      <w>1160</w>
      <h>890</h>
    </coordinates>
    <panel_attributes>bg=black
transparency=25
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>795</x>
      <y>495</y>
      <w>90</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.

fg=white
bg=black</panel_attributes>
    <additional_attributes>160.0;10.0;160.0;80.0;10.0;80.0;10.0;340.0;150.0;340.0;150.0;360.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>290</x>
      <y>575</y>
      <w>255</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTreeNode&lt;Type&gt;
--
- nodeData : Type(inherited)
- rootPoitner : BinarySearchTreeNode&lt;Type&gt; *
- leftChildPointer : BinarySearchTreeNode(Type data) : constructor
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt; *
--
+ BinarySearchTreeNode()

transparency=1
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1360</x>
      <y>610</y>
      <w>225</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--
# root : BinarySearchTreeNode&lt;Type&gt; *
--
+ BinarySearchTree() : constructor
+ ~BinarySearchTree() : destructor

+ getRoot() : BinarySearchTreeNode&lt;Type&gt; *
+ setRoot(BinarySearchTreeNode&lt;Type&gt; * root) : void

*Recursive Helper Methods*
# calculateSize(BinarySearchTreeNode&lt;Type&gt; *) : int
# calculateHeight(BinarySearchTreeNode&lt;Type&gt; *) : int
# isComplete(BinarySearchTreeNode&lt;Type&gt; *) : bool
# isBalanced(BinarySearchTreeNode&lt;Type&gt; *) : bool

#removeNode(BinarySearchTreeNode&lt;Type&gt; *) : void

# inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
# preOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
# postOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void

*Informational*
+ getSize() : int
+ getHeight() : int
+ isBalanced() : bool
+ isComplete() : bool

*Traversal*
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void

*Data Operations*
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
