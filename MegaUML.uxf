<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>60</y>
      <w>190</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>Class
--
Data Members
--
Methods
Constructors

transparency=1
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>150</y>
      <w>310</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>Timer
--
- executionTime : clock_t

--
+ startTimer() : void
+ stopTimer() : void
+ resetTimer() : void
+ displayTimerInformation() : void
+ getExecutionTimeInMicroseconds() : long
+Timer() : constructor


fg=white
bg=#001CFF
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>720</x>
      <y>0</y>
      <w>350</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData : int
- nodePointer : IntNode *

--
+ getNodeData() : int
+ getNodePointer() : IntNode *
+ setNodeData(int) : void
+ setNodePointer(IntNode *) : void

+ IntNode() : constructor
+ IntNode(int) : constructor
+ Intnode (int, IntNode *) : constructor

bg=#12FF00
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>0</x>
      <y>0</y>
      <w>190</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>Created by 
Jonah Tucker
bg=cyan
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>270</x>
      <y>0</y>
      <w>310</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- head : IntNode*
- size : int
--
+ IntNodeArray(int) : constructor
+ getSize() : int
+ getFromIndex(int) : int
+ setAtIndex(int index, int value) : void

bg=#179B0D
transparency=1
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>310</x>
      <y>220</y>
      <w>450</w>
      <h>250</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- nodeData : Type
- nodePointer: Node&lt;Type&gt; *
--
Construcutors
+ Node&lt;Type&gt;() : constructor
+ Node&lt;Type&gt;(Type value) : constructor
+ Node&lt;Type&gt;(Type value, Node&lt;Type&gt; * next) : constructor

Accessors

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt;()
+ setNodeData(Type) : void
+ setNodePointer(Node&lt;Type&gt; *) : void

transparency=1
bg=#29FAED</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>90</y>
      <w>170</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
fg=white</panel_attributes>
    <additional_attributes>10.0;10.0;150.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1070</x>
      <y>0</y>
      <w>490</w>
      <h>250</h>
    </coordinates>
    <panel_attributes>Array &lt;Type&gt;
--
- front : Node&lt;Type&gt;*
- size : int
--
+ Array() : default constructor
+ Array&lt;Type&gt;(int size) : constructor

+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+ getSize() const : int
+ getFront() const : Node&lt;Type&gt;*

+ getFromIndex(int index) : Type
+ setAtIndex(int index, Type value) : void

fg=white
transparency=1
bg=#00BFF</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>750</x>
      <y>230</y>
      <w>340</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
fg=white</panel_attributes>
    <additional_attributes>320.0;10.0;70.0;10.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>840</x>
      <y>250</y>
      <w>540</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
- end : Node&lt;Type&gt; *
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source): copy constructor
+ ~List&lt;Type&gt; : destructor

+ addAtIndex(int index, Type Value) : void
+ addFront(Type value) : void
+ addEnd(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type 
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSieze() const : int
+ getFront() const : Node&lt;Type&gt; *

fg=white
transparency=1
bg=#4245f4</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>550</x>
      <y>460</y>
      <w>310</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n
fg=white</panel_attributes>
    <additional_attributes>290.0;40.0;10.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>420</x>
      <y>460</y>
      <w>30</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
fg=white</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>310</x>
      <y>530</y>
      <w>530</w>
      <h>330</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
-
- nodeData : Type
- nextPointer : BiDirectionalNode&lt;Type&gt; *
- previousPointer : BiDirectionalNode&lt;Type&gt; *

-
Constructors
+ BiDirectionalNode&lt;Type&gt;() : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value) : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value, Node&lt;Type&gt; * next) : constructor

Accessors

- getNodeData() : Type
- getNextPointer() : Node&lt;Type&gt;()
- getPreviousPointer() : Node&lt;Type&gt;()
- setNodeData(Type) : void
- setNextPointer(Node&lt;Type&gt; *) : void
- set Previous Pointer(Node&lt;Type&gt; * ) : void

fg=white
transparency=1
bg=#232487</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1240</x>
      <y>780</y>
      <w>420</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>/DoublelyLinkedList&lt;Type&gt;/
-
- size : int
- front: BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
-
Non-virtual methods
+ getSize() const : int
+ getFront const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

Virtual methods
+ add()

transparency=1
bg=#e0e0e0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>830</x>
      <y>810</y>
      <w>430</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n
fg=white</panel_attributes>
    <additional_attributes>410.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1000</x>
      <y>1080</y>
      <w>290</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>Model :: CircularList&lt;Type&gt;
--
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ CircularList() : constructor
+ ~CircularList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addAtIndex(int index, Type data) : void

bg=#bf39ce
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1310</x>
      <y>1080</y>
      <w>290</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>Model :: Queue&lt;Type&gt;
--
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type


bg=#e333f7
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1620</x>
      <y>1080</y>
      <w>280</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>Model :: Stack&lt;Type&gt;
--
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Stack(): constructor
+ ~Stack(): destructor

+ push(Type data) : void
+ pop(): Type
+ peek(): Type

+add(Type data) : void
+ remove(int index) : Type

bg=#e71cff
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1130</x>
      <y>990</y>
      <w>340</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
fg=white
bg=black</panel_attributes>
    <additional_attributes>320.0;10.0;320.0;80.0;10.0;80.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1440</x>
      <y>990</y>
      <w>30</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.

fg=white
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1440</x>
      <y>990</y>
      <w>330</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.

fg=white
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0;310.0;80.0;310.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1300</x>
      <y>1350</y>
      <w>310</w>
      <h>250</h>
    </coordinates>
    <panel_attributes>Model :: DoubleList&lt;Type&gt;
--
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ DoubleList() : constructor
+ ~DoubleList(): destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addFront(Type data) : void
+ addEnd(Type data) : void
+ addAtIndex(int index, Type data) : void
+ addFastIndex(int index, Type value) : void


bg=#ff1cef
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>0</y>
      <w>2320</w>
      <h>1780</h>
    </coordinates>
    <panel_attributes>bg=black
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1290</x>
      <y>990</y>
      <w>180</w>
      <h>380</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.

fg=white
bg=black</panel_attributes>
    <additional_attributes>160.0;10.0;160.0;80.0;10.0;80.0;10.0;340.0;150.0;340.0;150.0;360.0</additional_attributes>
  </element>
</diagram>
