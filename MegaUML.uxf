<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>4</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>156</x>
      <y>24</y>
      <w>76</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>Class
--
Data Members
--
Methods
Constructors

transparency=1
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>156</x>
      <y>60</y>
      <w>124</w>
      <h>68</h>
    </coordinates>
    <panel_attributes>Timer
--
- executionTime : clock_t

--
+ startTimer() : void
+ stopTimer() : void
+ resetTimer() : void
+ displayTimerInformation() : void
+ getExecutionTimeInMicroseconds() : long
+Timer() : constructor


fg=white
bg=#001CFF
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>444</x>
      <y>0</y>
      <w>140</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData : int
- nodePointer : IntNode *

--
+ getNodeData() : int
+ getNodePointer() : IntNode *
+ setNodeData(int) : void
+ setNodePointer(IntNode *) : void

+ IntNode() : constructor
+ IntNode(int) : constructor
+ Intnode (int, IntNode *) : constructor

bg=#12FF00
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>156</x>
      <y>0</y>
      <w>76</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>Created by 
Jonah Tucker
bg=cyan
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>264</x>
      <y>0</y>
      <w>124</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- head : IntNode*
- size : int
--
+ IntNodeArray(int) : constructor
+ getSize() : int
+ getFromIndex(int) : int
+ setAtIndex(int index, int value) : void

bg=#179B0D
transparency=1
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>280</x>
      <y>88</y>
      <w>180</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- nodeData : Type
- nodePointer: Node&lt;Type&gt; *
--
Construcutors
+ Node&lt;Type&gt;() : constructor
+ Node&lt;Type&gt;(Type value) : constructor
+ Node&lt;Type&gt;(Type value, Node&lt;Type&gt; * next) : constructor

Accessors

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt;()
+ setNodeData(Type) : void
+ setNodePointer(Node&lt;Type&gt; *) : void

transparency=1
bg=#29FAED</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>384</x>
      <y>36</y>
      <w>68</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
fg=black</panel_attributes>
    <additional_attributes>10.0;10.0;150.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>584</x>
      <y>0</y>
      <w>196</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>Array &lt;Type&gt;
--
- front : Node&lt;Type&gt;*
- size : int
--
+ Array() : default constructor
+ Array&lt;Type&gt;(int size) : constructor

+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+ getSize() const : int
+ getFront() const : Node&lt;Type&gt;*

+ getFromIndex(int index) : Type
+ setAtIndex(int index, Type value) : void

fg=white
transparency=1
bg=#00BFF</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>456</x>
      <y>92</y>
      <w>136</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
fg=black</panel_attributes>
    <additional_attributes>320.0;10.0;70.0;10.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>492</x>
      <y>100</y>
      <w>216</w>
      <h>116</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
- end : Node&lt;Type&gt; *
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source): copy constructor
+ ~List&lt;Type&gt; : destructor

+ addAtIndex(int index, Type Value) : void
+ addFront(Type value) : void
+ addEnd(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type 
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSieze() const : int
+ getFront() const : Node&lt;Type&gt; *

fg=white
transparency=1
bg=#4245f4</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>376</x>
      <y>184</y>
      <w>124</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n
fg=black</panel_attributes>
    <additional_attributes>290.0;40.0;10.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>324</x>
      <y>184</y>
      <w>12</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
fg=black</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>280</x>
      <y>212</y>
      <w>212</w>
      <h>132</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
-
- nodeData : Type
- nextPointer : BiDirectionalNode&lt;Type&gt; *
- previousPointer : BiDirectionalNode&lt;Type&gt; *

-
Constructors
+ BiDirectionalNode&lt;Type&gt;() : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value) : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value, Node&lt;Type&gt; * next) : constructor

Accessors

- getNodeData() : Type
- getNextPointer() : Node&lt;Type&gt;()
- getPreviousPointer() : Node&lt;Type&gt;()
- setNodeData(Type) : void
- setNextPointer(Node&lt;Type&gt; *) : void
- set Previous Pointer(Node&lt;Type&gt; * ) : void

fg=white
transparency=1
bg=#232487</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>652</x>
      <y>312</y>
      <w>168</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>/DoublelyLinkedList&lt;Type&gt;/
-
- size : int
- front: BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
-
Non-virtual methods
+ getSize() const : int
+ getFront const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

Virtual methods
+ add()

transparency=1
bg=#e0e0e0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>488</x>
      <y>324</y>
      <w>172</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n
fg=black</panel_attributes>
    <additional_attributes>410.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>556</x>
      <y>432</y>
      <w>116</w>
      <h>92</h>
    </coordinates>
    <panel_attributes>Model :: CircularList&lt;Type&gt;
--
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ CircularList() : constructor
+ ~CircularList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addAtIndex(int index, Type data) : void

bg=#bf39ce
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>680</x>
      <y>432</y>
      <w>116</w>
      <h>92</h>
    </coordinates>
    <panel_attributes>Model :: Queue&lt;Type&gt;
--
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type


bg=#e333f7
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>804</x>
      <y>432</y>
      <w>112</w>
      <h>92</h>
    </coordinates>
    <panel_attributes>Model :: Stack&lt;Type&gt;
--
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Stack(): constructor
+ ~Stack(): destructor

+ push(Type data) : void
+ pop(): Type
+ peek(): Type

+add(Type data) : void
+ remove(int index) : Type

bg=#e71cff
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>608</x>
      <y>396</y>
      <w>136</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
fg=black
bg=black</panel_attributes>
    <additional_attributes>320.0;10.0;320.0;80.0;10.0;80.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>732</x>
      <y>396</y>
      <w>12</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.

fg=black
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>732</x>
      <y>396</y>
      <w>132</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.

fg=black
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0;310.0;80.0;310.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>676</x>
      <y>540</y>
      <w>124</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>Model :: DoubleList&lt;Type&gt;
--
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ DoubleList() : constructor
+ ~DoubleList(): destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addFront(Type data) : void
+ addEnd(Type data) : void
+ addAtIndex(int index, Type data) : void
+ addFastIndex(int index, Type value) : void


bg=#ff1cef
transparency=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>672</x>
      <y>396</y>
      <w>72</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.

fg=black
bg=black</panel_attributes>
    <additional_attributes>160.0;10.0;160.0;80.0;10.0;80.0;10.0;340.0;150.0;340.0;150.0;360.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>272</x>
      <y>372</y>
      <w>204</w>
      <h>132</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTreeNode&lt;Type&gt;
--
- nodeData : Type(inherited)
- rootPoitner : BinarySearchTreeNode&lt;Type&gt; *
- leftChildPointer : BinarySearchTreeNode(Type data) : constructor
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt; *
--
+ BinarySearchTreeNode() : constructor
+ BinarySearchTreeNode(Type data) : constructor
+ ~BinarySearchTreeNode() : destructor

+ getRootPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt; *

+ setRootChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * left) : void
+ setRightChildPointer(BinarySearchTreeNode&lt;Type&gt; * right) : void

transparency=1
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>40</x>
      <y>536</y>
      <w>276</w>
      <h>284</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--
# root : BinarySearchTreeNode&lt;Type&gt; *
--
+ BinarySearchTree() : constructor
+ ~BinarySearchTree() : destructor

+ getRoot() : BinarySearchTreeNode&lt;Type&gt; *
+ setRoot(BinarySearchTreeNode&lt;Type&gt; * root) : void

*Recursive Helper Methods*
# calculateSize(BinarySearchTreeNode&lt;Type&gt; *) : int
# calculateHeight(BinarySearchTreeNode&lt;Type&gt; *) : int
# isComplete(BinarySearchTreeNode&lt;Type&gt; *, int index, int size) : bool
# isBalanced(BinarySearchTreeNode&lt;Type&gt; *) : bool

#removeNode(BinarySearchTreeNode&lt;Type&gt; *) : void

# inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
# preOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
# postOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void

# getLeftMostChlid(BinarySearchTreeNode&lt;Type&gt; *) : BinarySearchTreeNode&lt;Type&gt; *
# getRightMostChild(BinarySearchTreeNode&lt;Type&gt; *) : BinarySearchTreeNode&lt;Type&gt; *

*Informational*
+ getSize() : int
+ getHeight() : int
+ isBalanced() : bool
+ isComplete() : bool

*Traversal*
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void

*Data Operations*
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void
+ findMinimum() : Type
+ findMaximum() : Type

*Demo Only*
+ demoTraversalSteps(BinarySearchTreeNode&lt;Type&gt; *) : void

bg=#00e600</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>344</x>
      <y>680</y>
      <w>268</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>Model :: AVLTree&lt;Type&gt;
-
# root : BinarySearchTreeNode&lt;Type&gt; * (inherited)
-
*AVLRotations*
- leftRotation(BinarySearchTreeNode&lt;Type&gt; * parent): BinarySearchTreeNode&lt;Type&gt; *
- rightRotation(BinarySearchTreeNode&lt;Type&gt; * first): BinarySearchTreeNode&lt;Type&gt; *
- leftRightRotation(BinarySearchTreeNode&lt;Type&gt; * first) : BinarySearchTreeNode&lt;Type&gt; *
- rightLeftRotation(BinarySearchTreeNode&lt;Type&gt; * first): BinarySearchTreeNode&lt;Type&gt; *

*Helper Methods*
- insertNode(BinarySearchTreeNode&lt;Type&gt; *, Type value) : BinarySearchTreeNode&lt;Type&gt; *
- removeNode(BinarySearchTreeNode&lt;Type&gt; *, Type value) : BinarySearchTreeNode&lt;Type&gt; *
 - balanceSubTree(BinarySearchTreeNode&lt;Type&gt; *) : BinarySearchTreeNode&lt;Type&gt; *
 - heightDifference(BinarySearchTreeNode&lt;Type&gt; * parent) : int

*Data Operations*
+ insert(Type) : void
+ remove(Type) : void

bg=#00cc00
 </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>348</y>
      <w>240</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>Mode :: Graph
-
- static const MAXIMUM : int
- adjacencyMatrix : bool [][] 
- graphData : Type []
- vertexCount : int
-
+ Graph() : constructor
+ ~Graph() : destructor
*Graph Operations*
+ addVertex(const Type&amp; value) : void
+ addEdge(int source, int target) : void
+ removeEdge(int source, int target) : void
+ addEdgeUndirected(int source, int target) : void
+ removeEdgeUndirected(int source, int target) : void
*Accessors*
+ operator [] (int vertex) : Type&amp;
+ operator [] (int vertex) const : Type
+ size() const : int
*Check Connections*
+ hasUndirectedConnection(int source, int target) const : bool
+ areConnected(int source, int target) const : bool
+ neighbors(int vertex) const : std::set&lt;int&gt;
*Traversals*
+ depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex) : void
+ breadthFirstTraversal(Graph&lt;Type&gt; graph, int vertex) : void
*Recursive Helper Method*
- depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex, bool markedVerticesp[]) : void

bg=#ff00ff
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>236</x>
      <y>144</y>
      <w>148</w>
      <h>236</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
fg=black</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;10.0;20.0;550.0;350.0;550.0;350.0;570.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>312</x>
      <y>500</y>
      <w>80</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>180.0;10.0;180.0;170.0;10.0;170.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>312</x>
      <y>744</y>
      <w>40</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
fg=black</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>416</x>
      <y>552</y>
      <w>200</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>Model :: Tree&lt;Type&gt;
-

*Informational Methods*
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool

*Traversals*
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void

*Data Operations*
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void

bg=#006600</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>388</x>
      <y>500</y>
      <w>20</w>
      <h>188</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;450.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>312</x>
      <y>624</y>
      <w>112</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
fg=black</panel_attributes>
    <additional_attributes>260.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>716</x>
      <y>220</y>
      <w>116</w>
      <h>76</h>
    </coordinates>
    <panel_attributes>HashNode&lt;Type&gt;
-
- nodeData: Type
- key : int

-
+ HashNode() : constructor
+ HashNode(Type data) : constructor

+ getKey() : int *
+ getNodeData() : Type
+ setNodeData(Type data) : void

bg=#ff9933</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>904</x>
      <y>184</y>
      <w>228</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>Model :: HashTable&lt;Type&gt;
-
- capacity : int
- size : int
- efficiencyPercentage : double
- tableStorage : [HashNode&lt;Type&gt; *]
-
+ HashTable() : default constructor
+ Array&lt;Type&gt;(int size) : constructor

+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp;toBeCopied) : copy constructor
+ operator = (const Array&lt;Type&gt; * toBeAssigned) : Array&lt;Type&gt; &amp;

+ getSize() const : int
+ getFront() const : Node&lt;Type&gt; *

+ getFromIndex(int index) : Type
+ setAtIndex(int index, Type value) void

bg=#ff8000</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>828</x>
      <y>260</y>
      <w>84</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n
fg=black</panel_attributes>
    <additional_attributes>190.0;10.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
